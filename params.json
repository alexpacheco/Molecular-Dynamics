{"name":"Molecular-dynamics","tagline":"Molecular Dynamics code to support training on Fortran, OpenMP and OpenACC programming and Makefile","body":"# Molecular Dynamics\r\n\r\n\r\n## General\r\n\r\nThis code supports the training on Modern Fortran, OpenMP and OpenACC \r\nthat I teach for LSU and LONI HPC users. This code is not for \r\nlearning Molecular Dynamics (though I might use it in the future). \r\nCan also be used for a tutorial on Makefiles. \r\n\r\n## Objective\r\n\r\nTake the original code and rewrite using Modern Fortran concepts \r\nlearned viz,\r\n\r\n   * spit code into smaller subunits: modules, functions and subroutines\r\n   * generalize code so that the following parameters are read as input\r\n      + number of atoms or number of unit cells (you can't do both)\r\n      + simulation/equilibration temperature\r\n      + number of times steps\r\n      + you will need to make use of allocatable arrays\r\n   * use object oriented concepts such as\r\n      + derived type data types\r\n      + generic procedures and operator overloading\r\n   * Extra exercise: add another potential e.g. Morse potential for \r\n     the simulation\r\n\r\nParallelize the code using\r\n\r\n   1. OpenMP\r\n   2. OpenACC\r\n   3. CUDA Fortran (when I learn how to do it)\r\n\r\n## Code Description\r\n   * Original Code: md-orig.f90\r\n      + This is the original code that students need to to work on. \r\n        The Objective is to modify this code using as many features\r\n        as you have grasped.\r\n   * Modified Code: md-v1.f90\r\n      + This version splits the original code into many subprograms.\r\n   * Modified Code: md-v2.f90\r\n      + This version generalizes the size of the program, reads input \r\n        parameters and uses allocatable arrays. Arrays are passed as\r\n        explicit shape arrays.\r\n   * Modified Code: md-v3.f90\r\n      + In this version, arrays are passed as assumed shape arrays \r\n        with intent attribute creating a need for interface.\r\n      + A module for calculating the potential and force is added.\r\n      + Morse potential is also added\r\n      + If this is final version, the only thing left for you to \r\n        learn is Object Oriented concepts. Congratulations!\r\n   * Modified Code: md-v4.f90\r\n      + Derived Types for MD variables are introduced.\r\n   * Object Oriented Code : md-v5.f90\r\n      + Adds generic procedures and operator overloading to the \r\n        md-v4.f90 code. \r\n      + If this is your final version, you have learned a lot of\r\n        Modern Fortran Concepts.  Congratulations!\r\n   * OpenMP Code  : md-omp.f90\r\n      + Parallelize the md.f90 code using OpenMP directives.\r\n   * OpenACC Code : md-acc.f90\r\n      + Parallelize the md.f90 code using OpenACC directives.\r\n        For this code to work, you need to have access to a machine \r\n        with an accelerator such as NVIDIA GPUs and an OpenACC \r\n        supported compiler such as Portland Group Compilers. \r\n        It should work with Cray or CAPS Compilers but I don't \r\n        have access to one.\r\n\r\n## Requires\r\n\r\nCompilers: \r\n\r\n   * gfortran, \r\n   * intel fortran or \r\n   * portland group compilers\r\n \r\nFor OpenACC/CUDA, portland group compilers is required and a machine with\r\n   NVIDIA GPUs (code is tested on NVIDIA Tesla M2090, don't have access to\r\n   AMD GPUs)\r\n\r\n## Compiling\r\n\r\n```\r\n$ make [option] [COMP=compiler]\r\n```\r\noptions: \r\n\r\n   * Serial  : v{0-5}\r\n   * OpenMP  : omp\r\n   * OpenACC : acc\r\n\r\ncompiler:\r\n\r\n   * gfortran : gcc\r\n   * intel    : intel\r\n   * portland : pgi\r\n   * IBM XL   : ibm (Makefile doesn't work on AIX)\r\n\r\n## Input Files\r\n\r\n * md.inp : Input file for version 2-5, openmmp and openacc (default potential is lj)\r\n * md.in : Input file for version 3-5, openmp and openacc\r\n    \r\n## Running\r\n\r\nSerial Code\r\n```\r\n$ ./md{0-5} [<input, needed for version 2-5>]\r\n```\r\n\r\nOpenMP Code\r\n```\r\n$ OMP_NUM_THREADS=x ./mdo <input>\r\n```\r\nwhere x is between 1 and number of processor cores\r\n\r\nOpenACC Code\r\n```\r\n$ ./mda <input>\r\n```\r\n\r\n## Output Files\r\n\r\nThe code will produce output to screen, you can redirect output to a file and analyze the simulation temperature and energy.\r\n```\r\n$ ./md0 > md.out\r\n```\r\n\r\nThe code also produces a atom.xyz file with atomic coordinates at each time step.\r\n\r\n## Visualization of MD Simulation using VMD\r\n\r\nThe VMD script, atom.vmd will read in the atom.xyz file and enable one to view the simulation\r\n```\r\n$ vmd -e atom.vmd\r\n```\r\n\r\n## Author\r\n\r\nAlex Pacheco, \r\n\r\nHPC User Services Consultant,\r\n\r\nLouisiana State University\r\n\r\n\r\n","google":"UA-29580123-2","note":"Don't delete this file! It's used internally to help with page regeneration."}